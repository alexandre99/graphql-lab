scalar DateTime

type Cliente {
   id: ID!     
   nome: String!
   cpf:  String!
   pets: [Pet!]
}

type Pet {
   id: ID!
   nome: String!
   dono: Cliente!
   tipo: String
   observacoes: String
}

type Servico {
   id: ID!
   nome: String!
   descricao: String!
   preco: Float!
}

type Atendimento {
   id: ID!
   cliente: Cliente!
   pet: Pet!
   servico: Servico!
   data: DateTime!
   status: String!
   observacoes: String
}

type Mutation {
    adicionarCliente(nome: String!, cpf: String!): Cliente!
    atualizarCliente(id: ID!, nome: String!, cpf: String!): Cliente!
    deletarCliente(id: ID!): ID!

    adicionarPet(nome: String!, donoId: Int!, tipo: String, observacoes: String): Pet!
    atualizarPet(id: ID!, nome: String!, donoId: Int!, tipo: String, observacoes: String): Pet!
    deletarPet(id: ID!): ID!

    adicionarServico(nome: String!, descricao: String!, preco: Float!): Servico!
    atualizarServico(id: ID!, nome: String!, descricao: String!, preco: Float!): Servico!
    deletarServico(id: ID!): ID!

    adicionarAtendimento(cliente: Int!, pet: Int!, servico: Int!, status: String!, observacoes: String): ID!
    atualizarAtendimento(id: ID!, cliente: Int!, pet: Int!, servico: Int!, status: String!, observacoes: String): ID!
    deletarAtendimento(id: ID!): ID!
}

type Query {
    status: String! 
    
    clientes: [Cliente!]
    cliente(id: ID!): Cliente

    pets: [Pet!]
    pet(id: ID!): Pet

    servicos: [Servico!]
    servico(id: ID!): Servico

    atendimento(id: ID!): Atendimento
}